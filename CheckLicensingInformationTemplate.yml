parameters:
  - name: projectSearchPattern
    type: string
    default: "*"
  - name: LicenseArtifactName
    type: string
    default: "License"

jobs:
  - job: "license"
    displayName: "Check Licensing Information"
    variables:
      - name: "licenseCheckerDownloadLocation"
        value: "$(Agent.TempDirectory)/nugetLicenseChecker"
    steps:
      - task: FileList@1
        displayName: "Generate list of involved projects"
        inputs:
          RootFolder: "$(Build.SourcesDirectory)"
          Matching: "${{ parameters.projectSearchPattern }}"
          Destination: "$(Agent.TempDirectory)/projects.json"

      - task: UseDotNet@2
        displayName: "Install .NET 6 SDK"
        inputs:
          packageType: "sdk"
          version: "6.0.x"
          performMultiLevelLookup: true

      - task: DownloadBuildArtifacts@0
        displayName: "Get NuGet license validation tool"
        inputs:
          buildType: "specific"
          project: "GE Services"
          pipeline: "NugetLicense"
          specificBuildWithTriggering: true
          buildVersionToDownload: "latest"
          downloadType: "single"
          artifactName: "NugetLicense"
          downloadPath: "$(licenseCheckerDownloadLocation)"

      - task: DotNetCoreCLI@2
        displayName: "Validate licenses of used Nuget packages"
        inputs:
          command: "custom"
          custom: "$(licenseCheckerDownloadLocation)/NugetLicense/NuGetUtility.dll"
          arguments: "-ji $(Agent.TempDirectory)/projects.json --allowed-license-types $(licenseCheckerDownloadLocation)/NugetLicense/LicenseInformation/allowedLicences.json --include-transitive --ignored-packages $(licenseCheckerDownloadLocation)/NugetLicense/LicenseInformation/packageFilter.json --licenseurl-to-license-mappings $(licenseCheckerDownloadLocation)/NugetLicense/LicenseInformation/urlToLicenseMapping.json --override-package-information $(licenseCheckerDownloadLocation)/NugetLicense/LicenseInformation/packageInfo.json"
      
      - bash: |
          tree $(licenseCheckerDownloadLocation)

      - task: DeleteFiles@1
        displayName: "cleanup utility"
        inputs:
          SourceFolder: $(Agent.TempDirectory)
          Contents: "**"
